"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
Versions={}

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,True)
      if not self.Afile.readat(None, 0):
        self.Afile.writeat('SE',0)

  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def readoldat(self,bytes,offset,count=0):
    # Read from the A file using the sandbox's readat...
    if count == 0:
      return self.Afile.readat(bytes,offset)
    else:
      try:
        fileold = openfile(self.Afn + str(count), True)
        return fileold.readat(bytes,offset)
      except FileNotFoundError:
        raise IndexError("Cannot find this version")

  def close(self):
    fileContentA = self.Afile.readat(None, 0)
    fileContentB = self.Bfile.readat(None, 0)
    if fileContentB.startswith('S') and fileContentB.endswith('E'):
      self.Afile.close()
      removefile(self.Afn)
      self.Afile = openfile(self.Afn, True)
      self.Afile.writeat(fileContentB, 0)
      if self.Afn in Versions:
        count = Versions[self.Afn]
        fileAnow = openfile(self.Afn + str(count), True)
        fileAnow.writeat(fileContentA, 0)
        Versions[self.Afn] = Versions[self.Afn] + 1
      else:
        count = 1
        fileAnow = openfile(self.Afn + str(count), True)
        fileAnow.writeat(fileContentA, 0)
        Versions[self.Afn] = count
        fileAnow.close()
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()