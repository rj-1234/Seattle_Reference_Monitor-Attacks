"""

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.newVersion = False
    self.writeNewVersion = False
    self.fileTail = ''

    # make the files and add 'SE' to the readat file...
    if create:
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn,False)
        count = 1
        newName = filename + self.fileTail + '.a'
        while newName in listfiles():
          self.fileTail = '_'+str(count)
          newName = filename + self.fileTail + '.a'
          count +=1
        self.Afn_new = filename + self.fileTail + '.a'
        self.Bfn_new = filename + self.fileTail + '.b'
        self.Afile_new = openfile(self.Afn_new,create)
        self.Bfile_new = openfile(self.Bfn_new,create)
        self.Afile_new.writeat('SE',0)
        self.Bfile_new.length = 0
        self.newVersion = True
      else:
        self.Bfile = openfile(self.Bfn,create)
        self.Afile = openfile(self.Afn,create)
        self.Bfile.length = 0
        self.Afile.writeat('SE',0)
    else:
      self.Afile = openfile(self.Afn,create)


  def writeat(self,data,offset):

    # Write the requested data to the B file using the sandbox's writeat call
    if self.newVersion:
      writeFile = self.Bfile_new
      self.writeNewVersion = True
    else:
      writeFile = self.Bfile
    writeFile.writeat(data,offset)
    if writeFile.length < len(data) + offset:
      writeFile.length = len(data) + offset


  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    if self.writeNewVersion:
      readFile = self.Afile_new
    else:
      readFile = self.Afile
    return readFile.readat(bytes,offset)

  def close(self):
    if self.newVersion == True and self.writeNewVersion == False:
      self.Afile_new.close()
      self.Bfile_new.close()
      removefile(self.Afn_new)
      removefile(self.Bfn_new)
      self.Afile.close()
    elif self.writeNewVersion == True:
      S_new = ''
      E_new = ''
      if self.Bfn_new in listfiles():
        S_new = self.Bfile_new.readat(1,0)
        if self.Bfile_new.length - 1 > 0:
          E_new = self.Bfile_new.readat(1,(self.Bfile_new.length - 1))
      if S_new == 'S' and E_new == 'E':
        self.Afile_new.writeat(self.Bfile_new.readat(None,0),0)
        self.Bfile_new.close()
        removefile(self.Bfn_new)
      self.Afile_new.close()
      self.Afile.close()
    else:
      S = ''
      E = ''
      if self.Bfn in listfiles():
        S = self.Bfile.readat(1,0)
        if self.Bfile.length - 1 > 0:
          E = self.Bfile.readat(1,(self.Bfile.length - 1))
      if S == 'S' and E == 'E':
        self.Afile.writeat(self.Bfile.readat(None,0),0)
        self.Bfile.close()
        removefile(self.Bfn)
      self.Afile.close()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()