"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    
    filelist = listfiles();
    self.postfix = 0
    self.Nfn = filename + '.' + str(self.postfix)
    while self.Nfn in filelist:
          self.postfix = self.postfix + 1
          self.Nfn = filename + '.' + str(self.postfix)
    #log(self.postfix)
    self.Ofn = filename
    self.Nfile = openfile(self.Nfn, True)

    self.Ffn = filename




      


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Nfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    version = offset
    if version < self.postfix:
       self.Ofn = self.Ofn + '.' + str(version)
       self.Ofile = openfile(self.Ofn,False)
       result = self.Ofile.readat(bytes,0)
       self.Ofile.close()
    else:
       result = 'file does not exist yet'

    return result

  def close(self):
    boo = True
    postfix = 0
    filename = self.Ffn
    #log(self.postfix)
    if self.postfix != 0:
       while postfix < self.postfix:
          self.Ffn = filename + '.' + str(postfix)
          self.Ffile = openfile(self.Ffn, False)
          temp = self.Ffile.readat(None,0)
          if temp == self.Nfile.readat(None,0):
              boo = False
              self.Ffile.close()
              break
          self.Ffile.close()
          postfix = postfix + 1
          #log(postfix)

    if not (self.Nfile.readat(1,0)=='S' and self.Nfile.readat(1,len(self.Nfile.readat(None,0))-1)=='E' and boo):
       self.Nfile.close()
       removefile(self.Nfn)
    else:
       self.Nfile.close()





def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()