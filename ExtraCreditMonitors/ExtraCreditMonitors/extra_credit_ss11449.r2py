"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    temp=0;
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Areal = newfilename+'.a'

    # make temporary file
    if create:
      self.Afile = openfile(self.Areal,create)
      self.Afile.writeat('Hello',0)

  def writeat(self,data,offset):
   self.Afile.writeat(data,offset)

   # read after writing to main file from temporary file
    def readat(self,flag,bytes,offset):
     temp=flag
     return self.A.flag.readat(bytes,offset)

  def getpos(flag)
  temp=flag

  def close(self):
   self.Afile.close()

  # store in temporary file and then write to file i+1

   abc=self.Afile.readat(None,0)
   fileval = openfile(self.temp,True)
   fileval.writeat(abc,0)

   fileval.close()

#-----------end of assignment-----------------


def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }
CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()





