TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False


    # local (per object) reference to the underlying file
    self.file = None
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.fn = filename
    self.A_file_lock = createlock()
    self.B_file_lock = createlock()
    self.size_limit = -1
    self.last_version = 0
    self.start_index = 0
    self.B_file_size = 0
    self.is_written = False

    self.file_exist = filename in listfiles()
    if not self.file_exist and not create:
        raise FileNotFoundError

    # make the files and add 'SE' to the readat file...
    if not self.file_exist:
        self.file = openfile(filename, True)
        self.file.writeat('-1#0#SE',0)
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
        self.Afile.writeat('-1#0#SE',0)
        self.Bfile.writeat('-1#0#',0)
        self.start_index = 5
    else:
        self.file = openfile(filename, False)
        alldata = self.file.readat(None, 0)
        tp = alldata.split('#',2)
        self.size_limit = int(tp[0])
        self.last_version = int(tp[1])
        data = tp[2]
        self.start_index = len(tp[0]) + len(tp[1]) + 2
        self.B_file_size = len(data)

        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
        self.Afile.writeat(alldata, 0)
        self.Bfile.writeat(alldata, 0)


  def setmaxfilesize(self,size):
    if size < -1:
        raise RepyArgumentError
    try:
        self.B_file_lock.acquire(True)
        if size >= -1:
            self.size_limit = size
        if size >= 0 and size < self.B_file_size:
            B_file_data = self.Bfile.readat(None, 0)
            self.Bfile.close()
            removefile(self.Bfn)
            self.Bfile = openfile(self.Bfn,True)
            self.Bfile.writeat(B_file_data[:self.start_index + size], 0)
        self.is_written = True
    except Exception as e:
        raise e
    finally:
        self.B_file_lock.release()
    

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    if offset < 0:
        raise RepyArgumentError
    if offset > self.B_file_size:
        raise SeekPastEndOfFileError

    try:
        self.B_file_lock.acquire(True)
        new_data_size = len(data)
        size_limit = self.size_limit

        new_file_size = max(offset + new_data_size, self.B_file_size )

        if size_limit != -1 and new_file_size > size_limit:
            data = data[:size_limit-offset]
            self.B_file_size = size_limit
        else:
            self.B_file_size = new_file_size

        self.Bfile.writeat(data,offset+self.start_index)
        self.is_written = True
    except Exception as e:
        raise e
    finally:
        self.B_file_lock.release()

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
        self.A_file_lock.acquire(True)
        data = self.Afile.readat(bytes,offset+self.start_index)
        return data
    except Exception as e:
        raise e
    finally:
        self.A_file_lock.release()

  def close(self):
    try:
        self.A_file_lock.acquire(True)
        self.B_file_lock.acquire(True)

        Bfile_data = self.Bfile.readat(None, 0)[self.start_index:]
        if len(Bfile_data) != 0 and Bfile_data[0] == 'S' and Bfile_data[-1] == 'E' and self.is_written:
            if self.file_exist:
                file_name_lst = self.fn.split('.')
                file_name_without_suffix = ''.join(file_name_lst[:-1])
                new_file_name_without_suffix = file_name_without_suffix + str(self.last_version)
                new_file_name = new_file_name_without_suffix + '.txt'
                new_file = openfile(new_file_name, True)
                new_file.writeat(self.file.readat(None, 0), 0)
                new_file.close()
                
            if self.file != None:
                self.file.close()
                removefile(self.fn)

            self.file = openfile(self.fn, True)
            self.file.writeat(str(self.size_limit) + '#' + str(self.last_version+1) + '#' + Bfile_data, 0)

        if self.file != None:
            self.file.close()
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Afn)
        removefile(self.Bfn)
    except Exception as e:
        raise e   
    finally:
        self.A_file_lock.release()
        self.B_file_lock.release()  

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "setmaxfilesize":{"type":"func","args":[(int,long,type(None))],"exceptions":Exception,"return":(type(None)),"target":ABFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()