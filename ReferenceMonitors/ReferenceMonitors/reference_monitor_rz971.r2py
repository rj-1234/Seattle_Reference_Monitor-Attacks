"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

##checks if a file is valid
##valid files start with "S" and end with "E"    
def isValidFile(aFile):
    filetext = aFile.readat(None,0)
    return filetext[0] == "S" and filetext[len(filetext)-1] == "E"

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False
        
        ##is valid object based filename 
        ##Non valid filenames will create objects that do not create ab files with methods that do nothing
        self.isValidObj = True
        
        ##filename must have . extenstion
        if filename.find(".") < 0:
            self.isValidObj = False
        
        ##Split extension from filename using . as delimitaor
        fileNameList = filename.split(".")
        
        ##Edge case where filename is ".txt"
        if len(fileNameList[0]) == 0:
            self.isValidObj = False
        
        ##Edge case where filename is more than 120 characters long
        if len(fileNameList[0]) > 120:
            self.isValidObj = False
        
        ##Allows only one extension . multiple is considered as invalid filename
        if len(fileNameList)>2:
            self.isValidObj = False
            
        ##filenames can only be alphanumeric and lowercase
        for char in fileNameList[0]:
            if not (char.isdigit() or char.islower()):
                self.isValidObj = False
                break
                
        if self.isValidObj:
            # local (per object) reference to the underlying file
            self.Afn = filename+'.a'
            self.Bfn = filename+'.b'
            
            ##checks if filename.a or filename.b exist
            ##if filename.a or filename.b exist, then we do not start from scratch
            ##prevent attacker from overwriting the current valid file by setting create as True 
            if self.Afn in listfiles():
                self.isFileAValid = True
                self.Afile = openfile(self.Afn,create)
                self.Bfile = openfile(self.Bfn,create)
                ##copy what was orignally in the valid file into the new file
                self.Bfile.writeat(self.Afile.readat(None,0),0)
                self.hasBeenWritten = False
            elif self.Bfn in listfiles():
                self.isFileAValid = False
                self.Afile = openfile(self.Afn,create)
                self.Bfile = openfile(self.Bfn,create)
                ##copy what was orignally in the valid file into the new file
                self.Afile.writeat(self.Bfile.readat(None,0),0)
                self.hasBeenWritten = False
            ##filename.a or filename.b does not exist    
            else:
                self.Afile = openfile(self.Afn,create) 
                # make the files and add 'SE' to the readat file...
                self.Afile.writeat('SE',0) 
                self.Bfile = openfile(self.Bfn,create)
                ##toggle to see which file is valid
                self.isFileAValid = True
                self.hasBeenWritten = False
        
    def writeat(self,data,offset):
        if self.isValidObj:
            self.hasBeenWritten = True
            if self.isFileAValid:
                self.Bfile.writeat(data,offset)
            else:
                self.Afile.writeat(data,offset)
  
    def readat(self,bytes,offset):
        if self.isValidObj:
            if self.isFileAValid:
                return self.Afile.readat(bytes,offset)
            else:
                return self.Bfile.readat(bytes,offset)
        return "SE"    

    def close(self):
        if self.isValidObj:
            if self.hasBeenWritten:
                ##checks which is the valid file being read from
                if self.isFileAValid:
                    ##file A is being read
                    ##if B is valid, if it is, then it is the updated valid file
                    ##delete A
                    ##toggle isFileValid
                    if isValidFile(self.Bfile):
                        self.isFileAValid = not self.isFileAValid
                        self.Afile.close()
                        self.Bfile.close()
                        removefile(self.Afn)
                    ##B is invalid
                    ##B is deleted
                    else:
                        self.Afile.close()
                        self.Bfile.close()
                        removefile(self.Bfn)
                else:
                    ##file B is being read
                    ##if A is valid, if it is, then it is the updated valid file
                    ##delete B
                    ##toggle isFileValid
                    if isValidFile(self.Afile):
                        self.isFileAValid = not self.isFileAValid
                        self.Afile.close()
                        self.Bfile.close()
                        removefile(self.Bfn)
                    ##A is invalid
                    ##A is deleted
                    else:
                        self.Afile.close()
                        self.Bfile.close()
                        removefile(self.Afn)
        
def ABopenfile(filename, create):
    return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()