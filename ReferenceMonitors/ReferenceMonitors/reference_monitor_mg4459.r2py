"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    if (not create):
      if (self.Afn in listfiles()):
        self.Afile = openfile(self.Afn, False)
      if (self.Bfn in listfiles()):
        self.Bfile = openfile(self.Bfn, False)

    # make the files and add 'SE' to the readat file...
    if create:   

      if (self.Afn not in listfiles()):
        self.Afile = openfile(self.Afn,True)
        self.Afile.writeat('SE',0)
      else:
        self.Afile = openfile(self.Afn,False)

      self.Bfile = openfile(self.Bfn,True)
      

  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    if (self.isValid('a')):
      return self.Afile.readat(bytes,offset)

  def setBtoA(self):
    currentOffset=0
    line = self.Bfile.readat(1, currentOffset)
    while line != '':
      self.Afile.writeat(line, currentOffset)
      currentOffset+=1
      line = self.Bfile.readat(1, currentOffset)

  def close(self):

    if (self.Bfn in listfiles() and self.Afn in listfiles()):
      if (self.isValid('b') == True):
        self.setBtoA()
        self.Afile.close()
        self.Bfile.close()
        return

    if (self.isValid('b') == False):
      self.Bfile.close()
      removefile(self.Bfn)


    if (self.isValid('a') == False):
      self.Afile.close()
      removefile(self.Afn)

    if (self.isValid('a') == True):
      self.Afile.close()

  def isValid(self, ch):
    if (ch == 'a'):

      firstChar = self.Afile.readat(1, 0)

      if (firstChar == ''):
        return False

      myStr = ""
      curr = 0
      cc = ' '

      while cc != '':
        cc = self.Afile.readat(1, curr)
        myStr += cc
        curr += 1

      secondChar = myStr[len(myStr)-1]

      if (str(firstChar) == "S" and str(secondChar) == "E"):
        return True

      return False

    if (ch == 'b'):

      firstChar = self.Bfile.readat(1, 0)

      if (firstChar == ''):
        return False

      myStr = ""
      curr = 0
      cc = ' '

      while cc != '':
        cc = self.Bfile.readat(1, curr)
        myStr += cc
        curr += 1

      secondChar = myStr[len(myStr)-1]

      if (str(firstChar) == "S" and str(secondChar) == "E"):
        return True

      return False

    return False

    
def ABopenfile(filename, create):
  return ABFile(filename,create)



# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()