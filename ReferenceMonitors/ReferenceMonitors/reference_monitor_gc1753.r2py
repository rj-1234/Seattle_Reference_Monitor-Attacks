# Gary Chi
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False
        self.checkValid = True
        self.checkWrote = False
        
        filenameSplit = filename.split(".")
        if (len(filenameSplit[0]) == 0 or len(filenameSplit[0]) > 120):
            self.checkValid = False
        for char in filenameSplit[0]:
            if not (char.isdigit() or char.islower()):
                self.checkValid = False
                break
        
        if self.checkValid:
            self.Afn = filename+'.a'
            self.Bfn = filename+'.b'
            
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            if (self.Afn in listfiles()):
                self.checkFileA = True
                self.Bfile.writeat(self.Afile.readat(None,0),0)
            elif (self.Bfn in listfiles()):
                self.checkFileA = False
                self.Afile.writeat(self.Bfile.readat(None,0),0)
            else:
                self.checkFileA = True
                self.Afile.writeat('SE',0)

    def writeat(self,data,offset):
        if (self.checkValid):
            self.checkWrote = True
            if (self.checkFileA):
                self.Bfile.writeat(data,offset)
                return
            self.Afile.writeat(data,offset)
  
    def readat(self,bytes,offset):
        if self.checkValid:
            if (self.checkFileA):
                return self.Afile.readat(bytes,offset)
            else:
                return self.Bfile.readat(bytes,offset)
        return "SE"

    def close(self):
        if self.checkValid and self.checkWrote:
            if self.checkFileA:
                if isValidFile(self.Bfile):
                    self.checkFileA = not self.checkFileA
                    self.Afile.close()
                    self.Bfile.close()
                    removefile(self.Afn)
                else:
                    self.Afile.close()
                    self.Bfile.close()
                    removefile(self.Bfn)
            else:
                if isValidFile(self.Afile):
                    self.checkFileA = not self.checkFileA
                    self.Afile.close()
                    self.Bfile.close()
                    removefile(self.Bfn)
                else:
                    self.Afile.close()
                    self.Bfile.close()
                    removefile(self.Afn)

def isValidFile(f):
    fv = f.readat(None,0)
    return fv[0] == "S" and fv[len(fv)-1] == "E"

def ABopenfile(filename, create):
    return ABFile(filename,create)

sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()