"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    file_lock = createlock()

    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        # Check if create==True and if fileA is not already present
        if create and self.Afn not in listfiles():
            # create new fileA and write 'SE' to it
            # fileA will always be valid
            self.Afile = openfile(self.Afn, create)
            self.Afile.writeat('SE', 0)

        else:
            # Else, open the existing file
            self.Afile = openfile(self.Afn, False)

        # Create an empty backup fileB
        self.Bfile = openfile(self.Bfn, True)

    def writeat(self, data, offset):
        # Acquire a lock and write to the backup fileB
        # Release the lock once done
        ABFile.file_lock.acquire(True)
        self.Bfile.writeat(data, offset)
        ABFile.file_lock.release()

    def readat(self, bytes, offset):
        # Read from the valid fileA
        return self.Afile.readat(bytes, offset)

    def close(self):
        # Read the new written data from fileB
        new_data = self.Bfile.readat(None, 0)

        # Check if the any write was performed and if it was valid
        if new_data != "" and new_data[0] == "S" and new_data[-1] == "E":
            # Create a new empty fileA and write new written data to it
            self.Afile.close()
            removefile(self.Afn)
            self.Afile = openfile(self.Afn, True)
            self.Afile.writeat(new_data, 0)

        # Close all files and delete fileB
        # since we need only one copy of the file in memory
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Bfn)


def ABopenfile(filename, create):
    return ABFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": ABFile,
                "name": "ABFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": ABFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": ABFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)), "target": ABFile.close}
                }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (
    str, bool), EXCP: Exception, RETURN: sec_file_def, TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()
