"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False

    if filename not in listfiles():
      self.Afn = filename+'.a'
      self.Bfn = filename+'.b'
    

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)

    else:      

      if filename+'.a' in listfiles():
        self.Bfn = filename+'.b'
        self.Bfile = openfile(self.Bfn,create)
      else:
        self.Afn = filename+'.a'
        self.Afile = openfile(self.Afn,create)
      


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):

    if self.Afile.readat(None,0) == 'S' and self.Afile.readat(None,0)[:-1] == 'E':
      self.Afile.close()
      self.Bfile.close()
      removefile(self.Bfile)

    self.Afile.close()
    self.Bfile.close()
      
   # elif self.Bfile.readat(None,0) == 'S' and self.Bfile.readat(None,0)[:-1] == 'E':
    #  self.Afile.writeat(self.Bfile,0)
     # self.Afile.close()
      #self.Bfile.close()
      #removefile(self.Bfile)
   # else:
    #  self.Afile.close()
     # self.Bfile.close()
      #removefile(self.Afile)
    #  removefile(self.Bfile)
     

  	
    #if fileA is valid, and fileB is valid
    #copy fileB to fileA
    #discard fileB
    #if checkValid(self.Afile) and checkValid(self.Bfile):
#      self.Afile.writeat(self.Bfile,0)
#self.Afile.close()
#self.Bfile.close()
#      removefile(self.Bfile)
      
      
    #if fileA is valid, and fileB is not
    #keep fileA only, discard fileB
#    elif checkValid(self.Afile) and not checkValid(self.Bfile):
 #     self.Afile.close()
#      self.Bfile.close()
#      removefile(self.Bfile)

    #if fileA if invalid, and fileB is valid
    #copy fileB into fileA and discard fileB
#    elif not checkValid(self.Afile) and checkValid(self.Bfile):
#      self.Afile.writeat(self.Bfile,0)
#      self.Afile.close()
#      self.Bfile.close()
#      removefile(self.Bfile)
#    if they are both invalid, discard both
#    elif not checkValid(self.Afile) and checkValid(self.Bfile):
#      self.Afile.close()
#      self.Bfile.close()
#      removefile(self.Afile)
#      removefile(self.Bfile)
     
                      
    
#  def checkValid(filename):
#    firstLetter = filemame.readat(None,0)
#    lastLetter = filename.readat(None,-2)
#    if firstLetter == 'S' and lastLetter == 'E':
#      return True
#    else:
#      return False
      


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
