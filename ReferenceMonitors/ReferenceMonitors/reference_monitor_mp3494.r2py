"""
Reference Monitor Requirements:
    Keeps a backup file incase it is written incorrectly
    DONE:: Correct files start with a S and ends with an E
            Any other characters including lower cases are invalid
    DONE:: Checking for S & E only performed at close()
    When readat() is called
        all reads must be performed on the valid files
    When writeat() is called
        all writes must be performed on the invalid file
    DONE:: If the app uses ABopenfile to create a file when create = true
        monitor will create a new file 'SE' in filename.a and an emptry file called filename.b
    DONE:: When close() is called on the file
        if a file is invalid, it is discarded
        If both are valid, the older one is discarded
"""

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

def ABopenfile(filename, create):
  return ABFile(filename, create)

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False   
        # local (per object) reference to the underlying file
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
        if(create == True):
            # If the files already exist Delete them
            # This only works if the person is trying to create new files from
            # the file he called ABfileOpenOn meaning create == True
            
            if(self.Afn in listfiles()):
                removefile(self.Afn)
            if(self.Bfn in listfiles()):
                removefile(self.Bfn)
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Afile.writeat('SE',0)
            
        # Attempt to make it so that if a file already exsists then it just
        # replaces the AFile with the B if B was the newest.
        # This only would come into play if a person just uses
        # ABopenfile("name",False).
        
        else:
            if(self.Afn in listfiles()):
                self.Afile = openfile(self.Afn,False)
                self.Bfile = openfile(self.Bfn,True)
            else:
                if(self.Bfn in listfiles()):
                    self.Bfile = openfile(self.Bfn,False)
                    self.Afile = openfile(self.Afn, True)
                    existingBFile = self.Bfile.readat(None,0)
                    self.Afile.writeat(existingBFile,0)
        
    def writeat(self,data,offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data,offset)
  
    def readat(self,bytes,offset):
        # Read from the A file using the sandbox's readat
        return self.Afile.readat(bytes,offset)

    def close(self):
        aValid = False
        bValid = False
        aFirstChar = ''
        aLastChar = ''
        bFirstChar = ''
        bLastChar = ''
        
        aFirstChar = self.Afile.readat(1,0)
        aFullList = self.Afile.readat(None,0)
        aLastChar = aFullList[len(aFullList)-1]
        
        bFirstChar = self.Bfile.readat(1,0)
        bFullList = self.Bfile.readat(None,0)
        bLastChar = bFullList[len(bFullList)-1]

        if(aFirstChar == 'S'):
            if(aLastChar == 'E'):
                aValid = True
            else:
                aValid = False
        else:
            aValid = False
    
        if(bFirstChar == 'S'):
            if(bLastChar == 'E'):
                bValid = True
            else:
                bValid = False
        else:
            bValid = False

        if(aValid == False):
            self.Afile.close()
            removefile(self.Afn)
        else:
            if(bValid == False):
                self.Bfile.close()
                removefile(self.Bfn)
            else:
                if(aValid == True and bValid == True):
                    if(len(aFullList) >= len(bFullList)):
                        self.Bfile.close()
                        removefile(self.Bfn)
                        self.Afile.close()
                    else:
                        self.Afile.close()
                        removefile(self.Afn)
                        self.Bfile.close()


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
