TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   


    # local (per object) reference to the underlying file
    self.file = None
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.fn = filename
    self.A_file_lock = createlock()
    self.B_file_lock = createlock()

    self.file_exist = filename in listfiles()
    if not self.file_exist and not create:
        raise FileNotFoundError

    # make the files and add 'SE' to the readat file...
    if not self.file_exist:
        self.file = openfile(filename, True)
        self.file.writeat('SE',0)
        self.Afile = openfile(self.Afn,True)
        self.Afile.writeat('SE',0)
        self.Bfile = openfile(self.Bfn,True)
    else:
        self.file = openfile(filename, False)
        data = self.file.readat(None, 0)
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
        self.Afile.writeat(data, 0)
        self.Bfile.writeat(data, 0)

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    try:
        self.B_file_lock.acquire(True)
        self.Bfile.writeat(data,offset)
    except Exception as e:
        raise e
    finally:
        self.B_file_lock.release()

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
        self.A_file_lock.acquire(True)
        data = self.Afile.readat(bytes,offset)
        return data
    except Exception as e:
        raise e
    finally:
        self.A_file_lock.release()

  def close(self):
    try:
        self.A_file_lock.acquire(True)
        self.B_file_lock.acquire(True)

        Bfile_data = self.Bfile.readat(None, 0)
        if len(Bfile_data) != 0 and Bfile_data[0] == 'S' and Bfile_data[-1] == 'E':
            self.file.writeat(Bfile_data, 0)
        self.file.close()
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Afn)
        removefile(self.Bfn)
    except Exception as e:
        raise e 
    finally:
        self.A_file_lock.release()
        self.B_file_lock.release()     

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()