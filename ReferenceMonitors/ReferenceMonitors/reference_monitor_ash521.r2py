"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)

    #else statement to handle if the file already exists
    else:

      #Write B's contents into A if A doesn't exist
      if (self.Afn not in listfiles() and self.Bfn in listfiles()):
        self.Afile = openfile(self.Afn, True)
        self.Bfile = openfile(self.Bfn, False)
        self.Afile.writeat(self.Bfile.readat(None, 0), 0)

      #Write A's contents into B if B doesn't exist
      elif (self.Bfn not in listfiles() and self.Afn in listfiles()):
        self.Afile = openfile(self.Afn, False)
        self.Bfile = openfile(self.Bfn, True)
        self.Bfile.writeat(self.Afile.readat(None, 0), 0)

      #If neither of them exist, user made an incorrect call where create is false when it should have been true
      elif (self.Bfn not in listfiles() and self.Afn not in listfiles()):
        self.Afile = openfile(self.Afn, True)
        self.Bfile = openfile(self.Bfn, True)
        self.Afile.writeat('SE',0)

  def __del__(self):
    # call close if user didn't close the file themselves
    self.close()


  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    #Check file validity here, decide which file to delete based on validity
    a_valid = self.checkValid(self.Afile)
    b_valid = self.checkValid(self.Bfile)

    self.Afile.close()
    self.Bfile.close()

    # If both valid, delete A since it's older
    if (a_valid and b_valid):
      removefile(self.Afn)

    # If B is invalid, remove it
    if (not b_valid):
      log("%s is not valid", self.Bfn)
      removefile(self.Bfn)

  #file validity-checking function
  def checkValid(self, filename):
    self.file_len = len(filename.readat(None, 0))

    #returns T/F if first character is S and if last character is E
    return (filename.readat(1, 0) == 'S' and filename.readat(1, self.file_len - 1) == 'E')



def ABopenfile(filename, create):
  return ABFile(filename,create)



# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()