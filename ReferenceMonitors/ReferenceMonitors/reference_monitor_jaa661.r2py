"""
Jacob Abbott
Jaa661
""" 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)
      #log("SE\n")


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    #could threads be used to write files at the same time?
    #tryna fix with a lock?
    newLock = createlock()
    blocking = True;
    if newLock.acquire(blocking):
      blocking = False;
      self.Bfile.writeat(data,offset)
      newLock.release()
      blocking = True;

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    #read shouldn't cause any issues
    return self.Afile.readat(bytes,offset)

  def close(self):
    # VVV can only check to see if files are valid here VVV
    #if Afile  start with S and end with E
      # if B file  start with S and end with E
          #discard the  older file
      #else
        #discard BFile
    #else
      #discard Afile 

    self.Afile.close()
    self.Bfile.close()


def ABopenfile(filename, create):
  #well I don't see anything they could do here
  return ABFile(filename,create)



#safety---------------------------------------------------------------
# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()