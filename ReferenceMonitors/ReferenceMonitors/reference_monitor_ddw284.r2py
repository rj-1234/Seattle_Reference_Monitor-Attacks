"""
This security layer inadequately handles A/B storage for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py     
]"""


TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False   
        mycontext['accepted_chars'] = "abcdefghijklmnopqrstuvwxyz1234567890."
        # local (per object) reference to the underlying file
        #The bottom of the program seems to handle filename checking fine
        self.Afn = filename.lower()+'.a'
        self.Bfn = filename.lower()+'.b'

        # make the files and add 'SE' to the readat file...
        #No valid file is created if not create, but checks and initializations are still done to prepare read/write
        #If B exists, make read only copy A
        if self.Bfn in listfiles():
            self.Bfile = openfile(self.Bfn, False)
            #If valid create backup
            if self.isvalid(self.Bfile):
                self.Afile = openfile(self.Afn, create)
                self.Afile.writeat(self.Bfile.readat(None,0),0)

            #If file exists and is not valid
            #Delete B and make new one + backup/A
            else:
                self.Bfile.close()
                removefile(self.Bfn)
                if create:
                    self.Afile = openfile(self.Afn,create)
                    self.Afile.writeat('SE',0)
                    self.Bfile = openfile(self.Bfn, create)
                    self.Bfile.writeat(self.Afile.readat(None,0),0)

        #Create default file
        elif create:   
            self.Afile = openfile(self.Afn,create)
            self.Afile.writeat('SE',0)
            self.Bfile = openfile(self.Bfn, create)
            self.Bfile.writeat(self.Afile.readat(None,0),0)

    def isvalid(self, file):
        self.flen = len(file.readat(None, 0))
        if file.readat(1,0) == 'S' and file.readat(1, self.flen-1) == 'E':
            return True
        else:
            return False

    def writeat(self,data,offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data,offset)
  
    def readat(self,bytes,offset):
        # Read from the A file using the sandbox's readat...
        return self.Afile.readat(bytes,offset)

    def close(self):
        #If B is valid, keep it
        if self.isvalid(self.Bfile):
            self.Afile.close()
            removefile(self.Afn)
            self.Bfile.close()
        elif self.isvalid(self.Afile):
            self.Bfile.close()
            removefile(self.Bfn)
            self.Afile.close()
        else:
            self.Afile.close()
            self.Bfile.close()
            removefile(self.Afn)
            removefile(self.Bfn)

def ABopenfile(filename, create):
    return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()