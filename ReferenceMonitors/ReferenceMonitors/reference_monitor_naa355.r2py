"""
Nazira Abdelkhalek
run with:
python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
BLOCKING = False

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = Falsefil
    mycontext['fileName']= fileName
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)


  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat cal
    #if file is valid then prevent write
    if data.startswith('S') and data.endswith('E'):
        BLOCKING = True
        lock = createlock()
        lock.acquire(BLOCKING)
        self.close(self)
        lock.release()
        BLOCKING = False
    #if file is not valid write to B file 
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    #if not valid then raise error 
    if not bytes.startswith('S') and bytes.endswith('E'):
        raise ValueError("File not valid.")
    #else if valid allow read on file A
    return self.Afile.readat(bytes,offset)
    

  def close(self):
    #check to see if file is valid, if valid, discard old and replace, if not valid #just discard
    if self.AFile.startswith('S') and self.AFile.startswith('E'):
      self.Bfile = self.Afile
      self.Afile.close()
      self.Bfile.close()
    else:
      self.Afile.close()
      self.Bfile.close()
      removefile(self.Afile())


def ABopenfile(filename, create): 
    return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()