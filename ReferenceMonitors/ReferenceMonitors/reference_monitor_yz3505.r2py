"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False   
        # local (per object) reference to the underlying file
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'
        self.file = None
        self.fn = filename
        self.Alock = createlock()
        self.Block = createlock()

        file_exist = self.Afn in listfiles()


        # make the files and add 'SE' to the readat file...
        if (not file_exist and not create):
            raise FileNotFoundError

        if not file_exist:
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Afile.writeat('SE',0)
        else:
            self.Afile = openfile(self.Afn, True)
            data = self.Afile.readat(None, 0)
            self.Bfile = openfile(self.Bfn, True)
            self.Bfile.writeat(data, 0)

    def writeat(self,data,offset):
        
        try:
            self.Block.acquire(True)
            self.Bfile.writeat(data,offset)
        except Exception as e:
            raise e 
        finally:
            self.Block.release()

        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data,offset)
  
    def readat(self,bytes,offset):
        
        try:
            self.Alock.acquire(True)
            data = self.Afile.readat(bytes,offset)
            return data
        except Exception as e:
            raise e    
        finally:
            self.Alock.release()    
        # Read from the A file using the sandbox's readat...
        #return self.Afile.readat(bytes,offset)

    def close(self):
        try:
            self.Alock.acquire(True)
            self.Block.acquire(True)
            B_data = self.Bfile.readat(None,0)
            if(len(B_data)!=0 and B_data[0]=='S' and B_data[-1]=='E'):
                if self.Afn in listfiles() :
                    self.Afile.close()
                    removefile(self.Afn)
                self.Afile = openfile(self.Afn, True)
                self.Afile.writeat(B_data, 0)
                self.Afile.close()
                self.Bfile.close()
                removefile(self.Bfn)
            else:
                self.Bfile.close()
                self.Afile.close()
                removefile(self.Bfn)
        except Exception as e:
            raise e     

        finally:
            
            self.Alock.release()
            self.Block.release() 



def ABopenfile(filename, create):
    try:
        if (filename == filename.lower()):
            return ABFile(filename,create)
        else:
            raise RepyArgumentError
    except Exception as e:
            raise e  



# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()