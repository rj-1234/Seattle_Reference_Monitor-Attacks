"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
      
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    mycontext[self.Afn] = createlock()
    mycontext[self.Bfn] = createlock() 

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      data = self.Afile.readat(None,0)
      if len(data) == 0:
        mycontext[self.Afn].acquire(True)
        self.Afile.writeat('SE',0)
        mycontext[self.Afn].release()


  def writeat(self,data,offset):
    
    # Write the requested data to the B file and locking for thread safety
    mycontext[self.Bfn].acquire(True)
    self.Bfile.writeat(data,offset)
    mycontext[self.Bfn].release()
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    mycontext[self.Afn].acquire(True)
    return self.Afile.readat(bytes,offset)
    mycontext[self.Afn].release()

  def close(self):
    #copy file B to A if B is valid, else delete B. 
    mycontext[self.Bfn].acquire(True)

    #check if b is valid
    data = self.Bfile.readat(None,0)
    bvalid = False
    if len(data) >= 2 and data[0] == 'S' and data[-1] == "E" :
      bvalid = True
    
    if bvalid: #copy b into a
      mycontext[self.Afn].acquire(True)
      self.Afile.writeat(data, 0)
      mycontext[self.Afn].release()

    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)

    mycontext[self.Bfn].release()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()