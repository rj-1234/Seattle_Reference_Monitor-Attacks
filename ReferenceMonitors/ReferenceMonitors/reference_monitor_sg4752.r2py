"""
The security layer handles A/B storage for files in REPYV2.
The objective of this file is to:
    a)Open two files from the disk and if they don't exist, create them.
    b)Read the data from a valid file (Starts with 'S' and ends in 'E') and write onto an invalid file
    b)Discard the invalid file or if both files are valid, then discard the older one.

"""


TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        mycontext['lock']= createlock()  #Creating a lock for the program
        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        # make the files and add 'SE' to the readat file...
	try:        
		if create:
        		self.Afile = openfile(self.Afn, create)
                	self.Bfile = openfile(self.Bfn, create)
			y=self.readat(None,0)
			if not y:
                		self.Afile.writeat('SE', 0)    #If the A file is empty, then write SE in it.
		elif not create:
			self.Afile = openfile(self.Afn, create)   #Checking if the files do exist, then simply opening them, and if not, then transferring the control to the next step
                	self.Bfile = openfile(self.Bfn, create)
	except Exception:
		pass

	
    def readat(self, bytes, offset):
        mycontext['lock'].acquire(bool(1))	#Acquiring the lock
	x=self.Afile.readat(bytes,offset)
	if x.startswith('S') and x.endswith('E'):
		mycontext['lock'].release()
		return x
	elif not x:
		mycontext['lock'].release()
		return x		
	else:
		mycontext['lock'].release()
		return x
		pass
		
			
    def writeat(self, data, offset):
        mycontext['lock'].acquire(bool(1))	#Releasing the lock
        
        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data, offset)

        mycontext['lock'].release()	#Releasing the lock
	

    def close(self):
	mycontext['lock'].acquire(bool(1))	#Acquiring the lock

	p=self.Afile.readat(None,0)
	q=self.Bfile.readat(None,0)
	
	mycontext['lock'].release()	#Releasing the lock
        if not (p.startswith('S') and p.endswith('E')):
		self.Afile.close()
        	removefile(self.Afn)
		self.Bfile.close()
        elif not (q.startswith('S') and q.endswith('E')):
		self.Bfile.close()
        	removefile(self.Bfn)
		self.Afile.close()
	else:
		self.Bfile.close()
		removefile(self.Bfn)
		self.Afile.close()
	
        

def ABopenfile(filename, create):
	return ABFile(filename, create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": ABFile,
                "name": "ABFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception,
                            "return": (int, type(None)), "target": ABFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception,
                           "return": str, "target": ABFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": ABFile.close}
                }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def,
                                   TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()
