"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
	def __init__(self,filename,create):
		# globals
		mycontext['debug'] = False   
		# local (per object) reference to the underlying file
		self.Afn = filename+'.a'
		self.Bfn = filename+'.b'

		# make the files and add 'SE' to the readat file...
		self.Afile = openfile(self.Afn,create)
		self.Bfile = openfile(self.Bfn,create)
	
		if create:
			strA = self.Afile.readat(1,0) # Need to check if the file already exists before writing "SE" to Afile
			if (strA == ""):
				self.Afile.writeat('SE',0)

	def writeat(self,data,offset):    
		# Write the requested data to the B file using the sandbox's writeat call
		self.Bfile.writeat(data,offset)
  
	def readat(self,bytes,offset):
		# Read from the A file using the sandbox's readat...
		return self.Afile.readat(bytes,offset)

	def close(self):
		# get a lock here?
		strB = self.Bfile.readat(None,0)
  
		# Check that first character is 'S'
		if(len(strB) > 0):
			if(strB[0] == "S"):	
				# Check that last character is 'E'
				if(strB[-1] == "E"):
					# means the Bfile is valid
					# need to discard the older Afile
					self.Afile.close()
					removefile(self.Afn)
					# create a new Afile
					self.Afile = openfile(self.Afn,True)				
					#copy the contents of Bfile to the new, empty Afile
					self.Afile.writeat(strB,0)		
			
			# In either case, we will not save the content inside B. B will be a blank file for future write operations
			self.Bfile.close()
			removefile(self.Bfn)
			# create a new Bfile
			self.Bfile = openfile(self.Bfn,True)
	
		self.Afile.close()
		self.Bfile.close()
		
		


def ABopenfile(filename, create):
		return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()