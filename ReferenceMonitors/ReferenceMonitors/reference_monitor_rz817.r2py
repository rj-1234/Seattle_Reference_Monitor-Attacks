# Regina Zbarskaya

"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False

    # (Reference to each part associated with a particular file name
    # for manipulation)
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # Create variables to indicate which files might have to be created
    newA = False;
    newB = False;

    # Check if files exist in directories
    if self.Afn in listfiles():
      self.Afile = openfile(self.Afn, False)
    else:
      newA = True;
    if self.Bfn in listfiles():
      self.Bfile = openfile(self.Bfn, False)
    else:
      newB = True;

    # If both 'a' and 'b' are not found: file does not exist on disk
    # Based on create variable, either create both parts
    # or return a FileNotFoundError from openfile
    # (If user indicated true; create both parts)
    # (If user indicated false; return exception)
    if newA and newB:
      self.Afile = openfile(self.Afn, create)
      self.Bfile = openfile(self.Bfn, create)
      self.Afile.writeat('SE', 0)

    # If only one of the a or b parts is not found: file still exists on disk
    # The 'b' part that is missing must be updated from its counterpart 'a'
    # 'a' can be attempted to be updated from 'b' if 'b' is valid
    # Otherwise, it will just contain SE as default
    # Since this is the init function, nothing new has been added to 'b' file yet

    # If 'a' is missing, create a new file and put SE as default into file
    if newA and not newB:
      # Create new 'a' file and write SE into it
      self.Afile = openfile(self.Afn, True)
      self.Afile.writeat('SE', 0)

      # Attempt to write from b to a by closing file
      dataB = self.Bfile.readat(None, 0)
      self.close()

      # Open the file again
      self.Afile = openfile(self.Afn, False)
      self.Bfile = openfile(self.Bfn, False)

      # Write invalid data back into B if it did not transfer over
      self.Bfile.writeat(dataB, 0)

    if newB and not newA:
      # Create new 'b' file and write nothing into it
      self.Bfile = openfile(self.Bfn, True)

      # Attempt to write from a to b
      dataA = self.Afile.readat(None, 0)
      self.Bfile.writeat(dataA, 0)


  # Function that writes to file
  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)

    # Close the file so any valid changes are carried over
    self.close()

    # Open the files again
    self.Afile = openfile(self.Afn, False)
    self.Bfile = openfile(self.Bfn, False)

    # If the changes were invalid, rewrite them back into the b file
    self.Bfile.writeat(data,offset)

  # Function that reads file
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  # Close files
  def close(self):
    # Obtain data of file a and file b
    dataB = self.Bfile.readat(None, 0)
    dataA = self.Afile.readat(None, 0)

    # Check whether file B is valid
    if dataB.startswith('S') and dataB.endswith('E'):
      # If file is valid, delete file A and create new with contents of file b
      self.Afile.close()
      removefile(self.Afn)
      self.Afile = openfile(self.Afn, True)
      self.Afile.writeat(dataB,0)
    else:
      # If file is not valid, delete file B and create new with contents of file a
      self.Bfile.close()
      removefile(self.Bfn)
      self.Bfile = openfile(self.Bfn, True)
      self.Bfile.writeat(dataA,0)

    self.Afile.close()
    self.Bfile.close()


# Function to open file
def ABopenfile(filename, create):
  return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
