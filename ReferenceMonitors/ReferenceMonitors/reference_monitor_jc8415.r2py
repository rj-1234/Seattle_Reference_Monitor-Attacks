"""
Justina Choi
jc8415@nyu.edu
Information Security and Privacy - Cappos
Assignment 2.1
October 19, 2017

Don't forget to turn off the debug flag before submitting!!!

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    mycontext['AfileTime'] = None
    mycontext['BfileTime'] = None

    # check for invalid filenames
    if len(filename.split('.')) != 2:
      if mycontext['debug']:
        log('Invalid filename: %s. Only alphanumeric and must include filetype\n' % filename)
      return
    filetype = filename.split('.')[-1]
    name = filename.replace('.%s' % filetype, '')
    if (not name.isalnum()) or (True in [x.isupper() for x in name]):
      if mycontext['debug']:
        log('Invalid filename: %s. Only lowercase alphanumeric allowed\n' % filename)
      return

    # local (per object) reference to the underlying file
    self.Afn = filename + '.a'
    self.Bfn = filename + '.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn, create)
      self.Bfile = openfile(self.Bfn, create)
      mycontext['BfileTime'] = getruntime()
      self.Afile.writeat('SE', 0)
      mycontext['AfileTime'] = getruntime()
      if mycontext['debug']:
        log('Created Afile and Bfile\n')
        log('Initialized AfileTime: %s\n' % mycontext['AfileTime'])
        log('Initialized BfileTime: %s\n' % mycontext['BfileTime'])


  def writeat(self, data, offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data, offset)
    mycontext['BfileTime'] = getruntime()
    if mycontext['debug']:
      log('Writing to Bfile: %s\n' % data)
      log('Updated BfileTime: %s\n' % mycontext['BfileTime'])
  
  def readat(self, bytes, offset):
    # Read from the A file using the sandbox's readat...
    data = self.Afile.readat(bytes, offset)
    if mycontext['debug']:
      log('Reading from Afile: %s\n' % data)
    return data

  def close(self):
    Afirst = self.Afile.readat(1, 0)
    Alast = self.Afile.readat(None, 0)[-1]
    Bfirst = self.Bfile.readat(1, 0)
    Blast = self.Bfile.readat(None, 0)[-1]
    AfileName = [x for x in listfiles() if x.endswith('.a')][0] # assumption!
    BfileName = [x for x in listfiles() if x.endswith('.b')][0]

    if mycontext['debug']:
      log('Afirst: %s, Alast: %s\n' % (Afirst, Alast))
      log('Bfirst: %s, Blast: %s\n' % (Bfirst, Blast))
      log('AfileName: %s\n' % AfileName)
      log('BfileName: %s\n' % BfileName)

    fileToRemove = None
    if Afirst != 'S' or Alast != 'E':
      if mycontext['debug']:
        log('Afile data invalid; removing Afile %s\n' % AfileName)
      fileToRemove = AfileName
    if Bfirst != 'S' or Blast != 'E':
      if mycontext['debug']:
        log('Bfile data invalid; removing Bfile: %s\n' % BfileName)
      fileToRemove = BfileName

    if not fileToRemove:
      if mycontext['BfileTime'] > mycontext['AfileTime']:
        fileToRemove = AfileName
      else:
        fileToRemove = BfileName
      if mycontext['debug']:
        log('Both valid... deleting older file: %s\n' % fileToRemove)
    
    self.Afile.close()
    self.Bfile.close()
    removefile(fileToRemove)

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
